https://links.mead.io/nodecourse
*section 2    
    -NodeJS is javascript on the server
        -runtime environment
    -runs in conjunction with V8
    -series of methods used in Javascript that are in fact running C++ behind the scenes
    -terminal command cls for clear
    -repl run in terminal
    -global is like window in the browser
    -process is like document, gives you all the methods and properties available to run
        -process.exit() gets you out of the javascript in the terminal
    SUMMARY (2.5)
    -nodejs is javascript on the server via the V8 chrome engine
        -provides C++ bindings to V8, allows you to do things like access the file system
    -(why nodejs?)
        non-blocking I/O model (input output) `querying database for records `it can do other things while waiting (non-blocking)
        -blocking: everything goes in order of steps, not moving to the next until the present is completed
        -non-blocking: not waiting for responses, starts all processes, and runs them IN THE BACKGROUND, with processes running independently of each other
*section 3
    -node module system
        -require function is how we load things to use 
            -importing your own files
                -modules (your .jsFiles; each .js file you create is scoped to itself)
                    -app.js can't load from utils.js, you have to explicitly export all the stuff you want to share from your file with the outside world
                        -this is module.exports = whatEver, which is available as the return value from when you require the file
                        -module.exports = require value elsewhere(?)
            -importing NPM modules
                -good common core functionality for apps
                    -2 step process 
                        -initalize npm within project (npm init)
                        -install necessary modules
                    -node modules  
                        -if not there, run `npm install,` will use contents of two package.json's to make necessary module folder

//////////////////////////////////REDUX//////////////////////////////////////////////////////////

NPM
    package manager
    npm init - generates package.json   
        -file that holds all dependencies and information about our app 
        -then can npm install various dependencies
            -generates node_modules
                -node generated directory
            -package-lock.json  
                -locked version of package manager
                -alongside regular package.json allows to delete node modules and re-add them 
    global npm packages flag with -g (for gLOBAL)
        -do not need to require in source files, like local npm packages 

//////////////////////////////////REDUX//////////////////////////////////////////////////////////

PROCESS.ARGV
    -argument vector
        -allows access for command line arguments, in array 
            -first 2 always same
                1-path to node on machine
                2-path to present file
    YARGS!
        -npm package that makes parsing process.argv easier
            -has options through flags: --help, --version 
            -builderObject
                -we can define all the options we want given commands to support

//////////////////////////////////REDUX//////////////////////////////////////////////////////////

JSON!
   -we need to turn our JS objects into strings, so fs can read and use them
        -const toBeJSON = JSON.stringify(notYetJSON);
        -JSON.parse() => takes in JSON data and returns it as a JS object

//////////////////////////////////REDUX//////////////////////////////////////////////////////////

ADDING NOTES WITH YARGS+OTHER STUFF 

    define addNote -> function responsible for adding a note
        -takes in title+body

    -in app.js, add new method for adding notes to the yargsObject for adding..in the handler! it will have the args from the addNote func, and pass necessary argv's  

    -addNote needs to be able to add info to dataStore
        -first need to load in existing notes w/ loadNotes 
            -takes no args, returns array of notes 
            -readWrite w/ parseStringify
            -try+catch for error handling
                -rW+pS in tryBlock
                -err returns an empty array so we can load things into it to handle thrown error

    -addNote-add a push for the data 

    -make a saveNotes function for taking in the array of data


//////////////////////////////////REDUX//////////////////////////////////////////////////////////

NOTE ADDING/ YARGS

1)addNote(title, body)
2)module.exports = {} for multiples functions
3)back to app.js to fix require for said multiples
4)handler for add in app.js now calls method from notes.js
5)addNote adds note to data store via loading in existing notes without overriding, parse them, add to array, then add back to data store 
6)loadNotes function for this, returns an array of notes, first put it into addNote as notes
7)readWrite and parseStringify on loadNotes 
8)try/catch statement for error handling/defensive code regarding loading notes 
9)return an empty array in catch block, will not overwrite data 
10)adding new note to the list with push method as object 
11)save data with reusable function called save notes 
12)saveNotes goes into addNote, saving the notes 
13)saveNotes stringifies notes and writes file to notes json of the new data 
14)addNote to check if title already taken, preventing duplicate notes 
15)array.filter to ensure no duplicates, alongside duplicateNotes array 
16)move notesPush into a conditional after the filter, if duplicateNotes comes up as zero, notesPush works, if duplicateNotes gets a copyNote, no push to notes, console.log that the note has been taken 

NOTE REMOVING/ YARGS
1)loadNotes as notes
2)filter function that was beyond me!!


NOTE ADDING
    pretty simple, he used forEach and we used for...of

NOTE READING
    pretty simple!

//////////////////////////////////REDUX//////////////////////////////////////////////////////////

NODE DEBUGGING!!!
-debugger
    -add at specific points throughout program, pauses program at point is inserted 
        -node --inspect-brk app.js add --title="debug again" --body="inspecting"
        -open chrome://inspect
            -open the executable path to our project, pause at debugger, check it out 
    -errors
        -start top down, first line has most detailed error line 






//////////////////////////////////REDUX//////////////////////////////////////////////////////////

Asynchronous Node.JS
    -single threaded language, can onlly do one thing at a time
        -callstack stack enforces via individual threads per layer
            -isn't completely single threaded   
                -node uses other threads in c++ behind the scenes to manage our events. think how you run other things while a setTimeout with 2000 runs.  
                    -this is the non-blocking nature of node
                        -think setTimeouts vs regular threads  

    *all scripts wrapped inside a function we do not create, defined by node. Often called the main function. First thing (bottom of callstack) is this main().

    sync- one line runs and then the next

    callstack- simple data structure provided by V8. Keeps track of all functions currently running. You can add something to the top, and if you want to remove something, it has to come from the top (think tennis tube).
    
    callback queue- maintain a list of all callback functions waiting to be executed. all things run in a line here, start at the end of the line and work your way to the front (quasi-callstack). 
    
    event loop- looks at two things: callstack and callback queue. if callstack empty, it runs items from callback queue. event loop waits for callstack to be empty before pushing things from cB queue to callstack. async cB's never run before the main()is done.

//////////////////////////////////REDUX//////////////////////////////////////////////////////////



//////////////////////////////////REDUX//////////////////////////////////////////////////////////

HTTP REQUESTS
weatherstack.com => temperature comes in celsius by default 
apiKey - c0d42c0159b8f4878c0d13dcb95d5bf7
search this in firefox! => raw data => 
http://api.weatherstack.com/current?access_key=c0d42c0159b8f4878c0d13dcb95d5bf7&query=37.8267,-122.4233
? demarcates query string of key/value pairs. join props with &


mapbox api key
pk.eyJ1IjoiamVldmVzMDIxMCIsImEiOiJja2owYjl1dGsxZjRvMndteXZ0dDA2djhoIn0.eRQ_alaM_Dt3ZFhCLxbbgg

    SKELETON FOR WEATHER
        -npm init -y
        -npm postman-request
        -request()
            -2 args
                1- options object outlining what we want to do
                2- cBfunction to run once we have the response
            
            -add json:true to request options object in javascript form 
        -Made first req and customized for challenge
            -customized for farenheit, via url query string 

    GEOCODING
        -address via latLon
            -chain 2 request    
                1- userAddress -> latLon -> weatherInAddress 

    ERROR HANDLING
        -error object used for lower level, OS things
        -response object is more for specific servers working with userSide stuff 
            -else if error statement needed on resObj 'else if(response.body.error) {}'
            -BREAK SITES IN BROWSER AND SEE RESULT FOR UNDERSTANDING ON RESPONSE ERRORS

    ASYNC NODE 
        -return harder to work with when doing async functions
        CALLBACK PATTERN
            -at core of async node development
            -function we provide as an argument to another function, that we call at some point in the future
            CB NOTES
                -you get your return statement from running the callback with an argument doing what needs to be done 
                -no return statement in geocode, only in setTimeout, which leads to the undefined
                -define THEN call for info via CALLBACK
                    -this is all due to the fact that there is no direct return value
                    -callbacks let you return something from a nodeAPI
                    -sync functions can use the return value
                    -async takes what you want to return into the callback, and then you call it after making the function, with WHAT YOU WANT as the first argument
                        -can think of async callbacks as a hack for return statements?
            WEATHER APP ASYNC   
                -


//////////////////////////////////REDUX//////////////////////////////////////////////////////////


//////////////////////////////////REDUX//////////////////////////////////////////////////////////
//////////////////////////////////REDUX//////////////////////////////////////////////////////////